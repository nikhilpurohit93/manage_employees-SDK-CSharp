/* 
 * Manage Contractors APIs
 *
 * This API supports all services required to manage Employees on HR system
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Employee
    /// </summary>
    [DataContract]
    public partial class Employee :  IEquatable<Employee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Employee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        /// <param name="Birthdate">Birthdate.</param>
        /// <param name="Country">Country.</param>
        /// <param name="Created">Created.</param>
        /// <param name="CustomerId">CustomerId.</param>
        /// <param name="Email">Email.</param>
        /// <param name="EmailVerified">EmailVerified.</param>
        /// <param name="FamilyName">FamilyName.</param>
        /// <param name="Formatted">Formatted.</param>
        /// <param name="FullName">FullName.</param>
        /// <param name="FullName">FullName.</param>
        /// <param name="Gender">Gender.</param>
        /// <param name="GivenName">GivenName.</param>
        /// <param name="HouseName">HouseName.</param>
        /// <param name="Locale">Locale.</param>
        /// <param name="Locality">Locality.</param>
        /// <param name="MiddleName">MiddleName.</param>
        /// <param name="MobileNumber">MobileNumber.</param>
        /// <param name="Modified">Modified.</param>
        /// <param name="Nickname">Nickname.</param>
        /// <param name="Password">Password.</param>
        /// <param name="Picture">Picture.</param>
        /// <param name="PostalCode">PostalCode.</param>
        /// <param name="PreferredUsername">PreferredUsername.</param>
        /// <param name="Profile">Profile.</param>
        /// <param name="Region">Region.</param>
        /// <param name="Street">Street.</param>
        /// <param name="StreetAddress">StreetAddress.</param>
        /// <param name="Username">Username (required).</param>
        /// <param name="Website">Website.</param>
        /// <param name="Zoneinfo">Zoneinfo.</param>
        public Employee(string Birthdate = default(string), string Country = default(string), decimal? Created = default(decimal?), string CustomerId = default(string), string Email = default(string), string EmailVerified = default(string), string FamilyName = default(string), string Formatted = default(string), string FullName = default(string), string FullName = default(string), string Gender = default(string), string GivenName = default(string), string HouseName = default(string), string Locale = default(string), string Locality = default(string), string MiddleName = default(string), string MobileNumber = default(string), decimal? Modified = default(decimal?), string Nickname = default(string), string Password = default(string), string Picture = default(string), decimal? PostalCode = default(decimal?), string PreferredUsername = default(string), string Profile = default(string), string Region = default(string), string Street = default(string), string StreetAddress = default(string), string Username = default(string), string Website = default(string), string Zoneinfo = default(string))
        {
            // to ensure "Username" is required (not null)
            if (Username == null)
            {
                throw new InvalidDataException("Username is a required property for Employee and cannot be null");
            }
            else
            {
                this.Username = Username;
            }
            this.Birthdate = Birthdate;
            this.Country = Country;
            this.Created = Created;
            this.CustomerId = CustomerId;
            this.Email = Email;
            this.EmailVerified = EmailVerified;
            this.FamilyName = FamilyName;
            this.Formatted = Formatted;
            this.FullName = FullName;
            this.FullName = FullName;
            this.Gender = Gender;
            this.GivenName = GivenName;
            this.HouseName = HouseName;
            this.Locale = Locale;
            this.Locality = Locality;
            this.MiddleName = MiddleName;
            this.MobileNumber = MobileNumber;
            this.Modified = Modified;
            this.Nickname = Nickname;
            this.Password = Password;
            this.Picture = Picture;
            this.PostalCode = PostalCode;
            this.PreferredUsername = PreferredUsername;
            this.Profile = Profile;
            this.Region = Region;
            this.Street = Street;
            this.StreetAddress = StreetAddress;
            this.Website = Website;
            this.Zoneinfo = Zoneinfo;
        }
        
        /// <summary>
        /// Gets or Sets Birthdate
        /// </summary>
        [DataMember(Name="birthdate", EmitDefaultValue=false)]
        public string Birthdate { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public decimal? Created { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name="email_verified", EmitDefaultValue=false)]
        public string EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets FamilyName
        /// </summary>
        [DataMember(Name="family_name", EmitDefaultValue=false)]
        public string FamilyName { get; set; }

        /// <summary>
        /// Gets or Sets Formatted
        /// </summary>
        [DataMember(Name="formatted", EmitDefaultValue=false)]
        public string Formatted { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets GivenName
        /// </summary>
        [DataMember(Name="given_name", EmitDefaultValue=false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Gets or Sets HouseName
        /// </summary>
        [DataMember(Name="house_name", EmitDefaultValue=false)]
        public string HouseName { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Locality
        /// </summary>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="middle_name", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets MobileNumber
        /// </summary>
        [DataMember(Name="mobileNumber", EmitDefaultValue=false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public decimal? Modified { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Picture
        /// </summary>
        [DataMember(Name="picture", EmitDefaultValue=false)]
        public string Picture { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public decimal? PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets PreferredUsername
        /// </summary>
        [DataMember(Name="preferred_username", EmitDefaultValue=false)]
        public string PreferredUsername { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public string Profile { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>
        [DataMember(Name="street_address", EmitDefaultValue=false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Zoneinfo
        /// </summary>
        [DataMember(Name="zoneinfo", EmitDefaultValue=false)]
        public string Zoneinfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  Birthdate: ").Append(Birthdate).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  Formatted: ").Append(Formatted).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  HouseName: ").Append(HouseName).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PreferredUsername: ").Append(PreferredUsername).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Zoneinfo: ").Append(Zoneinfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Employee);
        }

        /// <summary>
        /// Returns true if Employee instances are equal
        /// </summary>
        /// <param name="input">Instance of Employee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Birthdate == input.Birthdate ||
                    (this.Birthdate != null &&
                    this.Birthdate.Equals(input.Birthdate))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    (this.EmailVerified != null &&
                    this.EmailVerified.Equals(input.EmailVerified))
                ) && 
                (
                    this.FamilyName == input.FamilyName ||
                    (this.FamilyName != null &&
                    this.FamilyName.Equals(input.FamilyName))
                ) && 
                (
                    this.Formatted == input.Formatted ||
                    (this.Formatted != null &&
                    this.Formatted.Equals(input.Formatted))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.HouseName == input.HouseName ||
                    (this.HouseName != null &&
                    this.HouseName.Equals(input.HouseName))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.MobileNumber == input.MobileNumber ||
                    (this.MobileNumber != null &&
                    this.MobileNumber.Equals(input.MobileNumber))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Picture == input.Picture ||
                    (this.Picture != null &&
                    this.Picture.Equals(input.Picture))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.PreferredUsername == input.PreferredUsername ||
                    (this.PreferredUsername != null &&
                    this.PreferredUsername.Equals(input.PreferredUsername))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Zoneinfo == input.Zoneinfo ||
                    (this.Zoneinfo != null &&
                    this.Zoneinfo.Equals(input.Zoneinfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Birthdate != null)
                    hashCode = hashCode * 59 + this.Birthdate.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EmailVerified != null)
                    hashCode = hashCode * 59 + this.EmailVerified.GetHashCode();
                if (this.FamilyName != null)
                    hashCode = hashCode * 59 + this.FamilyName.GetHashCode();
                if (this.Formatted != null)
                    hashCode = hashCode * 59 + this.Formatted.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                if (this.HouseName != null)
                    hashCode = hashCode * 59 + this.HouseName.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.MobileNumber != null)
                    hashCode = hashCode * 59 + this.MobileNumber.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Picture != null)
                    hashCode = hashCode * 59 + this.Picture.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.PreferredUsername != null)
                    hashCode = hashCode * 59 + this.PreferredUsername.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.StreetAddress != null)
                    hashCode = hashCode * 59 + this.StreetAddress.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Zoneinfo != null)
                    hashCode = hashCode * 59 + this.Zoneinfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
